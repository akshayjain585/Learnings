Topics:
1. Programs
2. Selenium : TakeScreenshot,DataProvider, ReadWrite Operation
3. Jenkins
4. API Testing
5. Manual
6. Performance
7. SQL
8. Linux
9. Security : https://www.greycampus.com/blog/information-security/owasp-top-vulnerabilities-in-web-applications
10. Prepare test cases.
11. Puzzles
12. Difference between collections topics, Abstraction Interface, synchronised thread safe and non synchronized not thread safe
13. Thread life cycle
14. JDBC connection
15. Serialisation and Deserialisation : For ref : http://toolsqa.com/java/basic-java-programming/serialization-deserialization-java/
Ans. Process of converting the instance of class(Object of class) into bytestream so that it can be stored in a file/disk or can be sent to another computer via network to save the state of object due to shutdown or hibernate.
16. Download file popup.
17. Read XML file, properties, 
18. Memory leak : https://www.youtube.com/watch?v=iFr1cvwhfbw (ATM example) : https://dzone.com/articles/memory-leak-andjava-code
19. Synchronised method and synchronised statement
20. Registry : Its a hierarchical DB in windows which manages all the hardware info and applications.
21. Virtual memory : The memory used by the OS when it runs out of RAM to run other programs. This is basically a hard disk space used as it is RAM.
22. Singleton pattern
23. How Map and HashCode() works internally?
24. Difference between mutable and immutable objects. Create a immutable class? : https://www.javatpoint.com/how-to-create-immutable-class
25. Explain your project architecture end to end?


Xpath :
1. "//tagName[@Attribute='Value']" : Normal Case
2. "//tagName[contains(@Attribute,'value')]": Dynamically handle
3. "//tagName[starts-with(@Attribute,'value')]" : Dynamically handle
4. "//tagName[text()='value']" : To get text from webpage
5. "//tagName[@Attribute='value' and @attribute='value' and @attribute='value']" : To use multiple attribute
6. "//*[contains(text(),'value')]" : To get xpath using contains and text method
7. //tagName[@attribute='value']/tagName : Parent-child : Relative-Absolute xpath
8. "//input[@type='text' and not(contains(@title,'Search'))]"
9. CSS : https://www.softwaretestinghelp.com/css-selector-selenium-locator-selenium-tutorial-6/

Some of the common assertions supported by TestNG are

    assertEqual(String actual,String expected)
    assertEqual(String actual,String expected, String message)
    assertEquals(boolean actual,boolean expected)
    assertTrue(condition)
    assertTrue(condition, message)
    assertFalse(condition)
    assertFalse(condition, message)


Note : Selenium Web driver makes direct calls to browser using each browsers native support for automation, while Selenium RC requires selenium server to inject Javascript into the browser


1. moveToElement() : To hover the mouse.
2. contextClick() : To right click
3. dragAndDrop(); : actions.dragAndDrop("SourceLocator","DestinationLocator");
4. No. of frames : List<WebElement> frames = driver.findElements(By.xpath("//frame")); : int totalframes = frames.size();
5. Scroll : Using JavaScript : JavascriptExecutor jse = (JavascriptExecutor) driver; jse.executeScript
6. isDisplayed : To see if element is visible and isSelected : If its selected and isEnabled() : If its enabled
7. Ques 41) How do u get the attribute of the web element ?
8. Take screenshot
9. Enter/Tab using Actions class : ac.sendKeys(Keys.ENTER): for tab and (Keys.RETURN) : for Enter
10. Switch back from frame : use method defaultContent(); using switchTo()
11. Double click : act.doubleClick(webElement);
12. How will you handle dynamic elements ?
13. Synchronisation
14. TestNG listeners
14. Relative and Absolute xpath
15. Multiple window
15. Desired Capabilities
16. Thread.sleep(2000) and Selenium.setSpeed(2000) : setSpeed waits after every command

driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);

public static takeScreenshot(String fileName){
	try{
		File src = ((TakeScreenshot)driver).getScreenshotAs(OutputType.File);
		FileUtils.copyFile(src,"Screenshot\\"+)
	}
}

WebElement frame= driver.findElement(By.xpath("//frame"));

WebElement frame =  driver.switchTo().frame(frame)

Table : http://www.softwaretestinghelp.com/selenium-tutorial-18/
Static table :

for(int rows=1; rows<=5; rows++){
	for(int col=1; col<=3; col++){
		System.out.println(driver.findElement(By.xpath("//tagName[@att='value']/table[1]/tbody/tr[rows]/td[col])))
	}
}


**********************************Handling WebTable in Selenium **************************************************************

Table Format : 

<table>
	<thead>
		<tr>
			<th>  </th>
			<th>  </th>
			<th>  </th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>  </td>
			<td>  </td>
			<td>  </td>
		</tr>
		<tr>
			<td>  </td>
			<td>  </td>
			<td>  </td>
		</tr>
		<tr>
			<td>  </td>
			<td>  </td>
			<td>  </td>
		</tr>
	</tbody>
</table>

Ref : https://money.rediff.com/gainers/bsc/daily/groupa?

Code : http://www.softwaretestingstudio.com/read-data-web-table-selenium/

Q1. Handle the dynamic webtable and read all the columns in each row.
Ans. Above table has 1 row of heading and 3 rows normal with total of 4 rows having 3 column in each row.

1. Identify the webtable first.
2. Get the total number of rows inside a table now using findElements with tagName (tr)
3. Iterate through the rows to get the total number of column.
4. Get the total number of column in each row
5. Iterate through the column to print the value of each cell

WebElement table = driver.findElement(By.xpath("//table[@class='dataTable']"));
List<WebElement> rows = table.findElements(By.tagName("tr"));
for(int i=0; i<rows.size(); i++){
	List<WebElement> col = rows.get(i).findElements(By.tagName("td"));
	col_count = col.size();
	for(int j=0; j<col.size(); j++){
		System.out.println(col.get(j).getText());
	}
}

2. Handle the static table where you know the number of rows and columns?
Ans. WebElement table = driver.findElement("table");
	List rows = table.findElements(By.tagName("tr"));
	List col = table.findElements(By.tagName("td"));
	for(int i=0; i<rows.size(); i++){
		for(int j=0; j<col.size(); j++){
			System.out.println(col.get(j).getText());
		}
	}
	
3. How to print a single column value from all the rows starting from first to last?
Ans. WebElement table = driver.findElement(By.xpath("table"));
List<WebElement> rows = table.findElements(By.tagName("tr"));

/*

Below is comment part of code to identify the pattern. Here we are fetching value of all 4th column from each row.
Sample xpath :
//*[@id='customers']/tbody/tr[1]/td[4]  //4th column in 1st row
//*[@id='customers']/tbody/tr[2]/td[4]	//4th column in 2nd row
//*[@id='customers']/tbody/tr[3]/td[4]	//4th column in 3rd row

*/

String beforeXpath = "//*[@id='customers']/tbody/tr[";
String afterXpath = "]/td[4]" ;

for(int i=0; i<rows.size(); i++){
	String actualxpath = beforeXpath+i+afterXpath;
	WebElement element = driver.findElement(By.xpath(actualXpath));
	System.out.println(element.getText());
//To validate the value
	if(element.getText().equals("value")){
		System.out.println("true")
	}
}

************* Jmeter Performance Testing Questions!***********************************************

ThreadGroup : To simulate the number of users to hit the server for checking the performance.
Ramp-up period : Defines the time difference between each thread to make a request to the server
Loop Count : Defines the times each thread would make a request to the server.
Samplers : Defines the type of request thread will make to a server like http, ftp, java request or jdbc request.
Controllers : Used to control the flow of an application like performing some other task after hitting the server for each thread : Uses if,for loop.
Listeners: To show the reports in tree,graph formats
Timers : To define the delay after performing the requests : Uses random, constant timers etc.
Pre-processor : To clear the DB before login or anything which needs to be done before making a request
Post-processor : To perform the activities after making a request to a server.
Distributed Testing : By using a master-slave combination and distributing the load from each machine else server/local machine would crash if all threads are used from same machine.
Jmeter Non GUI mode : jmeter -n -t <scriptname.jmx>

To check reports detail : http://www.testingjournals.com/understand-summary-report-jmeter/

Label : Name/URL of the specific HTTP request.
Samples : No. of virtual users per request.
Min : Min time taken by a sample for specific label.
Max : Max time taken by a sample for specific label.
Error% : Percentage of failed request per label.
Throughput : No. of request processed by the server per time unit(sec,min,hours). Larger throughput is better.


**************** Test Lead Questions!*****************************************************************

I am not only responsible for execution but also responsible for the output of testing activities.

Begin with Project :
1. Analyze and understand the requirements.
2. KT to the testing team and self along with queries.
3. Kick off meeting with queries discussion along with the mindmap.

TestPlanning process :
1. To identify the scope of the testing.
2. Types of testing : Functional/Non Functional : Performance, Security
3. Testing Effort/Resources
4. Timelines: Deadlines
5. Features to be tested/Not to be tested
6. Test Environment
7. Risks involved
8. Entry Criteria
9. Exit Criteria


Responsibilities on daily basis :
1. Review the testing activities majorly by conducting the standups/scrum
2. Keep a track of new/updated requirements, having them added in the test cases and validation.
3. Make sure that environment is stable for testers to continue with the testing.
4. Keep a check of bug raised on daily/once in 2 days.

	
************* Selenium *********************************************************************************************************

1. Limitations of Selenium
Ans. WebBased application, Doesn't support captcha/barcode readers, mobile automation(can do using Appium), reporting (Need to use TestNG, JUnit)

2. Diff between Implicit/Explicit/Fluent/PageLoadTimeout/Thread.sleep
Ans. Implicit is for entire page to wait before giving an exception, Explicit to wait for one particular element.
Fluent wait is to apply wait after 5 sec or so means in duration, PageLoadtimeout is for loading the URL, thread.sleep wait is wait explicitly for one element making your thread to go in sleep mode.

3. To check if checkbox is selected?
Ans. driver.findElement(By.id(" ")).isSelected();
This returns true if selected but throws an exception if false so need to use catch block and return the value false.
Another way of doing it :
driver.findElement(By.id(" ")).getAttribute(" ").contains("checked");

4. How to manage multiple windows in Selenium?
Ans. String parentWindow = driver.getWindowHandle(); //This returns a String
Set<String> windows = driver.getWindowHandles(); //This returns set of string as set returns unique elements of all the windows present.
ArrayList<String> wList = new ArrayList(); //ArrayList maintains the sequence
Iterator it = windows.iterator();
while(it.hasNext()){       //It will store all the windows in ArrayList
	wList.add(it.next());
}
driver.switchTo().window(wList.get(indexNumber));

5. How to get coordinate of the window/element ?
Ans. For window :
Position p = driver.manage().window().getPosition(); 
p.getX() and p.getY();

Location l = driver.findElement(By.xpath("")).getLocation();
l.getX() and l.getY();

6. How to do mouser over,dragdrop,doubleclick, rightclick,keys operation in selenium?
Ans. Using Actions class
Actions action = new Actions(driver);
action.moveToElement(driver.findElement(By.xpath(" "))).click().build().perform(); //To move to the element
//Drag and Drop
WebElement source = driver.findElement(By.xpath(" "));
WebElement target = driver.findElement(By.xpath(" "));
action.dragAndDrop(source,target);
//Another way of drag and drop
action.clickAndHold(driver.findElement(By.xpath(" "))).moveToElement(driver.findElement(By.xpath(" "))).release(driver.findElement(By.xpath(" "))).build().perform();
//DoubleClick and RightClick
action.doubleClick(driver.findElement(By.xpath(" ")));
action.contextClick(driver.findElement(By.xpath(" ")));
//Keys Operation
action.sendKeys(Keys.ENTER); //All keyboard functions are available in Keys class

action.keyDown(webElement,Keys.SHIFT).sendKeys("Name").keyUp(webElement,Keys.SHIFT).build().perform();
actions.keyDown(Keys.COMMAND).keyDown(Keys.SHIFT).click(link),keyUp(Keys.COMMAND).keyUp(Keys.SHIFT).build().perform();

7. How to handle Alert,Frames and DropDown?
Ans : Alert :
Alert al = driver.switchTo().alert();
al.accept(); al.dismiss();
//Frames
int noOfFrames = driver.findElements(By.tagName("iframe")).size();
driver.switchTo().frame() : frame() is overloaded method which can take either frame index as int, frame name as String or frame element as WebElement.
driver.switchTo().defaultContent(); //To move back to main window.
driver.switchTo().parentFrame(); //To move the control to immediate parent frame if you are in nested frame.
//DropDown
Select s = new Select(driver.findElement(By.xpath(" ")));
s.selectByIndex(); //

8. How to handle https website in selenium?
Ans. FirefoxProfile profile = new FirefoxProfile();
profile.setAcceptUntrustedCertificate(false);
WebDriver driver = new Firefoxdriver(profile);

9. How to login into any site if its showing any authetication popup for user name and pass ?
Ans. Pass the credentials in URL
driver.get(http://username:password@URL);


10. Waits :
Implicit Wait : driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS); : Will come out earlier than 20 secs if element is found within 5 seconds. So its a dynamic wait like explicit wait.
Explicit Wait : WebDriverWait wait = new WebDriverWait(driver,20);
WebElement link = wait.until(ExpectedConditions.visibilityOfElementLocated(driver.findElement(By.xpath("//a"))));
FluentWait : Wait wait = new FluentWait(driver).withtimeout(20,SECONDS).pollingevery(5,SECONDS).ignore(Exception.class); 

Implicit Wait : Throws NoSuchElementException : Default Value - 0 (If you don't define implicit wait) and it polls the DOM(Document Object Model) every 500ms means twice in a second to find the element on a webpage. 
Therefore, implicit wait of 10 second will let driver to search for the element 20 times if its not found and then throw the NoSuchElementException.

Fluent Wait :  ElementNotVisibleException

Explicit Wait : Throws WebDriverTimeOut exception : Default TimeOut : .5 Secs : Available with WebDriverWait with some expectedConditions
Note : We can create our own Explicit wait method for sendkeys,click on a webelement as below :
public static sendKeys(WebDriver driver, WebElement element, int timeout, String value){		//Creating our own sendkeys method to use Explicit Wait
	new WebdriverWait(driver,timeout).
	until(ExpectedConditions.visibilityOf(element));
	element.sendKeys(value);	//using Selenium sendkeys method here
}

public static clickOn(WebDriver driver,WebElement element, int timeout){
	new WebDriverWait(driver,timeout).
	until(ExpectedConditions.elementToBeClickable(element));
	element.click();	//Calling Selenium click method now after using explicit wait to achieve synchronization
}

Methods in Explicit Wait :
a). visibilityOfElementLocated(WebElement)
b). invisibilityOfElementLocated(WebElement)
c). elementToBeClickable(WebElement)
c). elementToBeSelected(WebElement)

11. BrokenLinks in webPage
Ans. 1. Get total links using findElements and print the size.
2. Use for loop and take the attribute using String as "href" like allLinks.get(i).getAttribute("href") and store it in String url.
3. Pass the URL in method : verifyURL(url);
4. Create the method by creating object of URL class and casting HttpURLConnection to it.
5. Use method openConnection() --> connect() --> getResponseCode()

12. Upload a file in Selenium?
Ans. Using AutoIT tool
1. Download AutoIT tool and its editor.
2. Use three methods : ControlFocus,ControlSetText,Click in the editor an save with extension .au3
3. Complie the editor file to make it .exe file and call in java using Runtime class
4. Runtime.getRuntime().exec("Path of editor file")

13. Scroll in Selenium ?
Ans. Using JavaScriptExecutor and casting the object of driver reference to JavaScriptExecutor as methods are available in JavaScriptExecutor
JavaScriptExecutor jse = (JavaScriptExecutor)d;
jse.executeScript("window.scrollTo(1200,1200)") : This will do scroll down. Put (-ve) before the coordinates if you want to scroll up after scrolling down.


14. How to take screenshot in Selenium?
Ans. TakesScreenshot ts = (TakesScreenshot)d;  //Casting the driver object to TakesScreenshot class
File src = ts.getScreenshotAs(OutputType.File);
FileUtils.copyFile(src,new File("Path of the file.png"));

or

File src = ((TakesScreenshot)d).getScreenshotAs(OutputType.File);

15. Read/Write operation using Excel ?
Ans. 

16. Different types of xpaths :
Ans. 
Example (Used in Point 4) : <input type="password" name="password" onkeyup="validatepassword();" onblur="validatepassword();"> and lets assume text is "Practicing Xpaths"

1. //tagName[@Attribute='value']; : Basic
2. //tagName[@Attribute='value' and @Attribute='value' and @Attribute='value']; : Using AND condition
3. //tagName[@Attribute='value' or @Attribute='value']; : Using OR condition
4. //input[contains(@type,'ssw') and starts-with(@type,'p') and not(contains(@type,'z'))] : Combination of and,or and not
5. //tagName[contains(@Attribute,'value')]; : Using contains() method
6. //tagName[contains(text(),'Practicing Xpaths')]; : Using contains() along with text()
7. //tagName[starts-with(@Attribute,'value')]; : Using starts-with() method
8. //tagName[text()='value']; : Using text() method.
9. //td[@align='center']//child::img[1]	
10. //td[@align='center']//ancestor::table
11. //tagName[ends-with(@Attribute,'value')]; : Using ends-with() method
12. (//tagName[@Attribute='Value'])[2] : Second Index of WebElement

//a[text()='test2 test2']//parent::td[@class='datalistrow']//preceding-sibling::td[@class='datalistrow']//input[@name='contact_id']

1. ancestor
2. parent
3. child
4. sibling
5. following, following-sibling
6. preceding, preceding-sibling
7. descendant

17. Common exceptions in Selenium ?
Ans. 
1. NoSuchFrameException
2. NoSuchWindowException
3. NoSuchElementException
4. WebDriver exception
5. TimeOut Exception
6. NoAlertPresentException

Refer : http://www.softwaretestingstudio.com/common-exceptions-selenium-webdriver/

18. WebDriver architecure ?
Ans. It has four components :
1. Selenium Library/Languages(Java,Perl,Python,Ruby,C#)
2. JSON(Java Script Object Notation) Wire protocol to send the information to browser driver like firefoxdriver, chromedriver etc.
3. Browser drivers like FirefoxDriver, ChromeDriver,OperaDriver etc
4. Browsers like Firefox Browser, chrome , Internet, Safari
https://www.softwaretestingmaterial.com/selenium-webdriver-architecture/

WebDriver hierarchy :
1. SearchContext is the super interface which has only two methods : findElement and findElements
2. WebDriver is an interface which extends SearchContext interface. WebDriver has many methods like get(String url), close(), quit() etc.
3. RemoteWebDriver is a fully implemented class which implements WebDriver, JavaScriptExecutor(Interface) and TakeScreenshot(Interface). Fully implemented class means it defined body for all inherited methods.							
4. Last, we have browser driver classes like FirefoxDriver,ChromeDriver,SafariDriver which extends the RemoteWebDriver class.

WebElement hierarchy :
1. WebElement is an interface which extends SearchContext and TakesScreenshot interface. It has many useful abstarct methids like click(), sendKeys(), isSelected() etc.
2. RemoteWebELement is a fully implemented class as it implements WebElement interface. In fact, findElement() and findElements() of SearchContext interface have been defined properly in this class only.
3. When we search for some element using findElement or findElements() method, a type of RemoteWebElement class is up casted to WebElement. And when we perform any action on webelement like click(), method defined in RemoteWebElemnt class will be executed because of overriding concept.

To see the diagram and understand better, refer the below page :
Refer : http://makeseleniumeasy.com/2017/04/02/hierarchy-of-selenium-classes-and-interfaces/

19. How to validate the multiple inline error messages in a webpage?
Ans. 

20. Synchornization in Selenium : Customized method to handle?
Ans. http://learn-automation.com/best-way-to-handle-synchronization-in-selenium-webdriver/
http://learn-automation.com/how-to-solve-stale-element-reference-exception-in-selenium-webdriver/

21. How to configure Selenium Grid?
Ans.
1. Create a Hub and Node configuration.
Create Hub from Command Line :
java -jar <Selenium Jar> -port 4723 -role hub

2. Create Node after logging to any VM
java -jar <Selenium Jar> -port 4723 -role node <HubIP>

22. How to verify if WebElement exists on webpage or not ?
Ans. 1. To get the title and assert with the expected title.
2. To get the text and assert with the expected text.
3. Use findElements method and check the size of it as mentioned below ;
if(driver.findElements.size!=0){
	syso("Element exists");
}else{
	syso("Element doesn't exists");
}
Refer : https://artoftesting.com/automationTesting/check-if-an-element-is-present-in-a-webpage-selenium-webdriver-java.html
Note : Above code will throw an exception if findElement is used. Since, it throws "No Suce Element exception" if element is not found.


******************** TestNG **********************************************************************************************************************

1. Annotations main sequence : @BeforeMethod --> @Test --> @AfterMethod
Note : BeforeMethod/AfterMethod is executed after every @Test annotations.
Note : @CacheLookup : To improve the script performance by storing/caching the webelements, @FindBy(xpath,class,id="")


2. Complete Sequence : @BeforeSuite @BeforeTest @BeforeClass @BeforeMethod @Test @AfterMethod @AfterClass @AfterTest @AfterSuite

3. Difference between @BeforeTest, @BeforeClass and @BeforeMethod annotations in TestNG?
Ans. Afer understaning the TestNG.xml file, the hierarchy is :
<suite>
	<test name = "Sanity">
		<classes>
			<class name = "com.android.packageName.className1">
			<class name = "com.android.packageName.className2">
		</classes>
	</test>
	<test name = "Sanity">
		<classes>
			<class name = "com.android.packageName.className1">
			<class name = "com.android.packageName.className2">
		</classes>
	</test>	
</suite>	

So, <test> tag is wrapped by @BeforeTest and @AfterTest
    <class> tag is wrapped by @BeforeClass and @AfterClass
	
Means, BeforeTest will get executed before test tag once for all the classes mentioned in the test tag. That means, BeforeTest will run once for the testtag "Sanity" once and BeforeClass will run once for the class. Now, as per
the above testNG.xml file, we have 2 classes in Sanity Test tag. Here, @BeforeTest will run once for the whole Test and @BeforeClass will run once for the first class and again for the second class.

@BeforeSuite : This runs before the suite starts.
@BeforeTest : This will run once before all the classes mentioned in the test tag mentioned in the TestNG.xml file. If there are multiple Test configfured in TestNG.xml file, it will run for each Test tag mentioned.
@BeforeClass : This will run once for every class mentioned in the test tag.
@BeforeMethod: This will run before every @Test annotation mentioned in the class file.

	

4. KeyWords : @Test(priority=1,groups={"Title"},dependsOnMethods={"MethodName"},dependsOnGroups={"groupA"},invocationCount=10,alwaysRun=true)
Note : 
If a method is written without priority : On the basis of alphabetical order, it will be executed.
If a method has same priority : Then it will look for alphabetical order of those test methods
If a method has non prioritised and prioritised method : Then, first non prioritised method with alphabetical sequence and then prioritised one. 

5. invocationCount : No. of times we want to run the method in @Test annotation.

6. Assert.assertEquals(driver.getTitle(),"Google","Title not matching");

7. How to use parameterisation using testNG?
Ans. One of the way is to use @Parameters annotation and pass the attribute name from testNG.xml file. These are known as environment variables defined in TestNG.xml file
Example :
@Test
@Parameters({"url","username","password"})
public void exampleParameters(String url,String username,String password){
	driver.get(url);
	driver.findElement(By.xpath("")).sendKeys(username);
	driver.findElement(By.xpath("")).sendKeys(password);
}
testNG.xml File sample :
<parameter name="url" value="http--"/>
<parameter name ="username" value="akshay"/>
<parameter name = "password" value="admin@123"/>

8. DataProvider annotation in TestNG?
Ans. @DataProvider(name = "login")
public object[][] login(){
	Object[][] result = new Object[5][1];
	result[0][0] = "username";
	result[0][1] = "password";
	return result;
}

or

@DataProvider(name="Login")
public object[][] login(){
	return new Object[][]{
		{"mercury","mercury"},
		{"mercury123","mercury123"},
	};
}

@Test(dataProvider="login")
public void testLogin(String name,String password){
	driver.findElement(By.xpath("")).sendKeys(name);
	driver.findElement(By.xpath("")).sendKeys(password);
}


9. Difference between Soft and Hard Assertion?
Ans. SoftAssertion : Will go to next statement even if Assertion fails : In the end use softAssert.assertAll() to get a list of all soft assertions.
Hard : Will terminate the program there itself if assertion fails.
We get AssertionException if any assertion fails.

10. We can tell TestNG to avoid any exception passing it as an attribute in @Test annotation method
Ex : @Test
public void test(expectedException=ElementNotFoundException){}

11. How to do parallel testing in TestNG?
Ans. Using parallel attribute in testNG file
<suite name="SmokeSuite" parallel="test/classes/methods/instance" thread-count="5"> : Threadcount : no of browsers to execute the test.
Reference : https://www.softwaretestingmaterial.com/parallel-test-execution-testng/

12. Customised reports in TestNG?
Ans. Using iTestListener/iSuiteListener/iReporter interface.
a). Create a class which implements any of the above interface and define the unimplemented methods of these interfaces.
b). iTestListener : onStart(), onFinish(), onTestSuccess(), onTestFailure(), onTestSkipped(), onTestFailedButWithinSuccessPercentage()
c). iSuiteListener : onStart(), onFinish()
d). iReporter : generateReport()
e). iRetryAnalyzer : retry() : To run the failed test cases

13. How will you run the failed test/Retry logic in TestNG?
Ans. Using iRetryAnalyzer() interface and override its method and pass the class name in TestNG xml or put it in @Test.
Abstract method of this interface : retry()
Similarly there is one more interface called "iAnnotationTranformer" which is used at run time and apply retry logic on every test case if defined in testng.xml file.

14. Cross Browser testing in Selenium?
Ans. Using @Parameters annotation
https://www.guru99.com/cross-browser-testing-using-selenium.html

15. Assert Methods
Ans. Main methods are below :
1. Assert.assertEquals(actual,expected);
2. Assert.assertEquals(actual,expected,"Error message")
3. Assert.assertTrue(condition);
4. Assert.assertFalse(condition);
5. Assert.assertTrue(condition,message);
6. Assert.assertFalse(condition,message);

16. testNG.xml sample file with Parameters and Listeners added?
Ans. 
<suite name="Sanity Suite">

<listeners>
	<listener class-name = com.android.package.listenerclass>
</listeners>

	<test name = "Main test">
	<parameter name="userNAme" value="Akshay">
	<parameter name = "password" value ="akshay">
		<classes>
			<class name = "com.android.packageName.className">
			<class name = "com.android.packageName.className">
		</classes>
	</test>
</suite>

17. How to print the method name in each BeforeMethod() annotation?
Ans. Use this syntax :
@BeforeMethod
public void beforeMethod(Method m){
	System.out.println(m.getName());
}

************** API Testing **************************************************************************************************************

API is the list of methods and classes exposed by that application which can be used by other application to use their functionalities. Eg. Gson, Jackson, Apache Commons,etc

Webservice is the type of API over HTTP. E.g Google, facebook, twitter’s webservice to use the login service for authenticating and signing into other application.


1. HTTP Metods :
Ans.
1. GET : To get specified resource without passing body. 
2. POST : The create resource by passing body.
3. PUT : To replace/update resource by passing body. (Complete update of resource unlike Patch which is Partial modification of resource)
4. DELETE : To delete specified resource.
5. OPTIONS : To describe the communication options for the target resource.
6. CONNECT : To start the two-way communications with the resource and can be used to access websites that uses SSL.
7. TRACE : For debugging and testing purposes. It echo's back input to the user.
8. PATCH : To apply the partial modification to a resource.
9. HEAD : Same as GET, but transfers the status line and header section only.

2. HTTP Status codes
Ans. 2xx : Success , 3xx : Redirection, 4xx : Client Error, 5xx : Server error
200 : OK		  : With GET request
201 : Created     : With POST/PUT request
202 : Accepted
204 : No content  : With DELETE request
400 : Bad Request
401 : Unauthorised : Authentication error 
402 : Payment required : Paid service
403 : Forbidden : Authorised error(Need permissions/privileges)The request has been refused. See the accompanying message for the specific reason (most likely for exceeding rate limit).
404 : Not found
409 : Conflict
500 : Internal Server Error
502 : BAD GATEWAY : The service is down or being upgraded. Try again later.
503 : SERVICE UNAVAILABLE: : The service is up, but overloaded with requests. Try again later.
504 : GATEWAY TIMEOUT : Servers are up, but the request couldn’t be serviced due to some failure within our stack. Try again later.

3. What does Header represents in API call?
Ans. Header represents the extra information returned by the server like content type etc. It is mentioned always in Key-value pair.


4. What all things to be verified in API testing while making a web-service call?
Ans. 1. HTTP status code returned by the server.
2. Content of the header
3. Content of the body.
 
5. How to validate the response status code using Rest Assured? //Ref : http://toolsqa.com/rest-assured/validate-response-status-code-using-rest-assured/
Ans : Response from HTTP call methods (Get,POST,PUT): The first line returned by the server is Status line which has three substrings : "HTTP/1.1 200 OK"
To get all info : Response.getStatusLine() : Response is an interface which has many abstract methods.
1. HTTP protocol version 
2. HTTP status code : Response.getStatusCode();
3. Status code's string value

6. How to validate response header using Rest Assured ?  //Ref : http://toolsqa.com/rest-assured/validate-response-header-using-rest-assured/
Ans. Response interface has methods for getting headers as well.
1. To get all headers : Response.getHeaders() or Response.headers() : Returns all headers and can be iterated using For each loop
Example : Headers allheaders = Response.headers(); //Headers is a class
for(Headers header : allheaders){
	System.out.println("Header Key: "+header.getName()+" Header Value: "+header.getValue());
}
2. To get specific header : Response.getHeader(String headerName) or Response.header(String headerName) : Returns the specific header name as a string
Example : String headerName = Response.getHeader("Content-Type");
String headerName = Response.getHeader("Server");
String headerName = Response.getHeader("Content-Encoding");

7. How to validate the response body using Rest Assured?
Ans. Similar way like validating the status code and header. Response interface has methods for validating the body as well.
1. To get the body : ResponseBody body = Response.body() or ResponseBody body = Response.getBody() //Returns the body and this can be converted in String like Response.body().asString(); //ResponseBody is also an interface
2. To validate the exact node from JSON body : Response.JsonPath(); //Returns the JsonPath object
Example : JsonPath jsonPath = Response.JsonPath();
String city = jsonPath.get("City")  // Will give result for this : { "City" : "Delhi" }

OR to get the array of list from the response :

List<String> userNames = Response.jsonPath().getList("username"); //Refer : https://www.testingexcellence.com/parse-json-response-rest-assured/

Refer : https://www.testingexcellence.com/parse-json-response-rest-assured/

8. How to create a JSON body for making POST request if content type is JSON?
Ans. JSONObject json = new JSONObject();
//Add key-value pairs using Put method like Map interface
json.put("Name","Akshay Jain");
json.put("FirstName","Akshay");
json.put("LastName","Jain");

9. Deserializing JSON response body to a class? //Ref : http://toolsqa.com/rest-assured/deserialize-json-response-class-rest-assured/
Ans. To deserialize the JSON body and do the assertion. Below steps :
1. Create a class which has same no. of variables as the number of nodes returned by the server in Response body. 
2. Use Response method as : Response.getBody().as(SampleClass.class) //SampleClass will have same no. of variables as nodes.
3. Above code will copy the node value of JSON into variable of SampleClass and then do the assertion.

10. Authentication and Authorizaton in Rest Assured?
Ans. There is a header called "Authorization" where user has to pass the username/password in some form to access the private resource while making a webservice call. Authorization is something where user gets authorized by providing the authentication using the header as "Authorization"
Example : Private Resource API which would need Authentication and fails with 401 (Unauthorized)if webservice is made directly without passing the authentication.
Endpoint: http://restapi.demoqa.com/authentication/CheckForAuthentication
Username/Password : ToolsQA/TestPassword
Refer to PostMan in Mac : Learning API's : Have imported the Tools QA private resource and added the basic auth.

11. POST v/s PUT?
Ans. 
1. Post is Cacheable if server sends the response in header. PUT is not cacheable
2. Post is not idempotent. PUT is idempotent similar to DELETE. (Idempotent means multiple requests made by client will produce the same result)
3. Post creates the resource. PUT updates the resource.
4. Multiple POST req end up with diff result. Multiple PUT req will be same result. (Bcz POST is not idempotent and PUT is idempotent)

12. REST v/s SOAP?
Ans. 
1. Soap is a protocol. Rest is an architectural pattern.
2. Soap uses WSDL. Rest can communicate using xml, JSON, plain text.
3. Soap can't use Rest because its a protocol. Rest can use Soap as the underline protocol because its a pattern.
4. Soap's java API is JAX-WS. Rest's Java api is JAX-RS
5. Soap needs more bandwidth. Rest needs less.



******************** String & Collections ********************************************************************************************

1. Why strings are immutable?
Ans. Strings are immutable bcz it uses the concept of String literal. Lets say there are 5 references variables and all refers to one object and if one reference variable changes the value of the object then it will be affected to all the reference variables. Thats why its immutable.
Once you create a String object lets say String a = "Akshay",  JVM checks in the string constant pool if this object is present or not. If not, then it wil create a new object.

Example : When we create a string in java like String s1="hello"; then an object will be created in string pool(hello) and s1 will be pointing to hello.Now if again we do String s2="hello"; then another object will not be created but s2 will point to the same object hello because JVM will first check if the same object is present in string pool or not.If not present then only a new one is created else not.
Now if suppose java allows string mutable then if we change s1 to hello world then s2 value will also be hello world so java String is immutable.

2. String methods
Ans. 
1. substring(startIndex,EndIndex) : startIndex is inclusive and EndIndex is exclusive
2. substring(StartIndex)
3. equals(String) : Checks for the content as well as case
4. equalsIgnoreCase(String) : Ignore case and checks just the content.
5. == operator : returns true/false if both the string object refers to same reference.
6. compareTo(String) : returns 0,1,-1 lexicographically.
7. indexOf(String str), indexOf(char ch), indexOf(String str, int fromIndex), indexOf(char ch, int from Index) : returns the index if present else -1 (Ref : https://beginnersbook.com/2013/12/java-string-indexof-method-example/)
Example :   
       String str1 = new String("This is a BeginnersBook tutorial");
       String str2 = new String("Beginners");
       System.out.println(str1.indexOf(str2)) : 10 //Beginners B starts from 10th index
       System.out.println(str1.indexOf('B',15)) : 19 //Book B starts at 19th index. Since, we have mentioned as after 15th index
       System.out.println(str1.indexOf("Iam")) : -1 //Doesn't have any substring
8. lastIndexOf() : Has all same variations like indexOf() : Difference is it returns the last index rather indexOf() returns first index. Both returns -1 if not found.
       
       
3. Difference between List, Set and Map?
Ans. 1. Duplicity : List-Yes, Set-No, Map : No duplicate Keys but values.
2. Order : List-Maintains, Set-No(From the implementing classes), Map: No(From the implementing classes)
3. Null : List-Yes(Any no), Set- Single null value at most, Map-One null key at most but many values
4. Classes : List-(ArrayList, LinkedList,etc), Set-(HashSet, LinkedHashSet,TreeSet), Map-(HashMap,LinkedHashMap,TreeMap)

4. Collection Hierarchy?
Ans. Iterable -> Collection
List -------------- Set -----------------------Queue
ArrayList         HashSet						PriorityQueue
LinkedList		LinkedHashSet					Deque(I) --> ArrayDeque
Vector			SortedSet(I) --> TreeSet
  |
Stack

And Map which is a part of collection framework but doesn't extend collection interface. Its in other branch of collection interface.

Map(I) -- HashMap, LinkedHashMap, Hashtable : All classes implements Map interface
 | (Extends)
SortedMap(I) -- TreeMap


5. Difference between HashMap and HashTable?
Ans. 
HashMap                                                      Hashtable
1. Non Synchronized						                    Synchronized
2. Allows one null key and many null values                 No null key or values
3. Faster due to non thread safe							Slower due to thread safe
4. Can be synchronized using synchronizedMap method		Can't be unshynchronized 
5. Traversed by Iterator									Traversed by Iterator and Enumerator	

6. String v/s StringBuffer v/s StringBuilder
Ans. String : Immutable, Rest are Mutable, can be shared with multiple threads freely being immutable
StringBuffer : Synchronized, ThreadSafe, Slow
StringBuilder : Non Synchronized, Not Thread Safe, fast

(a)To convert StringBuffer/Builder to String : Use .toString() method
(b)To convert String to Buffer/Builder : 
String s1 = "Akshay";
StringBuffer sb1 = new StringBuffer(s1);
StringBuilder sb2 = new StringBuilder(s1);
(c)To convert StringBuffer to StringBuilder or vice-versa. First convert it to String using .toString() method and then to respective type.

7. Iterator and ListIterator and Enumerator?
Ans.
Topics 					Iterator				ListIterator									Enumerator
Direction 				Forward					Forward and Backward							Forward
Objects Traversal		List, Map, Set			Only List Interface								Legacy classes like vector,stack,Hastable
Retrieve Index			No						Yes using nextIndex() and previousIndex()		only available methods are hasMoreElements(), hasNext()
Operations				Only remove				add,remove,replace using add() and set()		No operations only traversal

8. Comparable and Comparator?
Ans.
Topics						Comparable										           Comparator
SortingSequence 		Single Sorting Seq,Using one element like id,name etc			Multiple Sorting seq, using multiple elements like name,id,price etc.
Methods						compareTo()													compare()
Package						java.lang													java.util
Sort						Collections.sort(List)										Collections.sort(List,Comparator)


9. Autoboxing and Unboxing ?
Ans. Conversion of primitive datatype to Wrapper class is Autoboxing and opposite of this is unboxing means from wrapper to primitive.
Example :
Character c = 'c' //Auto-boxing : Primitive to Character Wrapper class
char ch = c       //Unboxing : Wrapper to Primitive datatypes

10. Wrapper classes & its methods?
Ans. Since java is not 100% object oriented programming language due to its primitive data types. They have a solution like wrapper classes 
where the datatypes can be converted to a wrapper class and will be treated as an wrapper class object to make it 100% object oriented.
Primitive : Non primitive (Wrapper class)
byte, short, int, long, float, double, char : Byte,Short,Int,Long,Float,Double,Character
1byte, 2byte, 4byte, 8byte, 4byte, 8byte, 2byte

Methods :
int a = Integer.parseInt("123") //Converting from String to int
float b = Float.parseFloat("123") //Converting from String to float

11. Memory allocation in Java?
Ans. JVM divides the memory as below :
1. Stack : Local variables/Methods/Ref variables
2. Heap : Instance variables/Objects/Ref variables
3. Static : Static data/methods
4. Code : bytecode
for ref : https://www.guru99.com/java-stack-heap.html

12. Abstract class v/s Interface?
Ans. Interface 													Abstract class
1. Only abtstract methods										Both abstract and non abstract methods
2. Full abstraction												Partial abstraction
3. Static and final member variables by default					Can have static/non static, final/non-final member variables
4. Public methods by default									Can be public, private,protected,default
5. Can be implemented using "implements"						Can be extended using "extends"
6. Supports Multiple inheritance								Doesn't support
7. Keyword "interface"											Keyword "abstract"
8. No constructor												Can have constructor								

Since Java8 interface can have default and static methods which can have body.

13. Synchronized Method and Synchronized Block. What is the need of Synchronization in Multithreading?
Ans. Synchronization is required when multiple threads try to access the shared resource/method at the same time. So, to avoid conflict synchronization should be used either as a method or a block where
synchronization needs to be done to avoid conflict so that only one thread can use the resource/method/part of code at a time.
Example : If there is a joint account where acc bal is 1000. One customer/thread tries to withdraw money as 600. At the same time other customer/thread tries to withdraw money like 600 at the same time
which can't happen since there is just 1000 rps available in account and by the time second thread puts the request, acc bal is not updated so both of their request becomes true. So, conflict happens when cust tries to withdraw money greater than acc bal. To avoid this, we use synchronization.

14. Garbage collection in Java?
Ans. Example : Student s1 = new Student()
We have created an object of Student class. Now, JVM does the garbage collection for the objects which has no reference or no longer needed.
Now s1 points to the objects but if we do s1 = null so now s1 doesn't point to Student object and it is eligible for garbage collection. 
we can explicitly call JVM for garbage collection using System.gc() but there is no gurantee that JVM will do since its just like a request. JVM does it periodically.

15. Use of finalize() in Java?
Ans. It is a method present in super class of all class which is Object class. It is called by garbage collector before releasing the memory for the object which doesn't have any reference. 
This is used by subclass if overridden to perform any clean up activity before object is garbage collected.

16. Final v/s Finally v/s Finalize()?https://www.geekhttps://www.geeksforgeeks.org/myth-file-name-class-name-java/sforgeeks.org/myth-file-name-class-name-java/
Ans. Final is a keyword which is used with variable(value can't change), method(can't be overridden), class(can't be extended)
Finally is a block which gets executed always and must be followed by either try or catch block.
Finalize() is a method present in object class called by garbage collector before garbage collection.

17. Custom exception in java?
Ans. Create a class that should end with Exception like CustomClassException extending it to Exception class and create a constructor inside and call super method.
Ex. class CustomClassException extends Exception{
	public CustomClassException(String message){
		super(message);
	}
}

18. Memory leak in java?
Ans. The objects which are no longer needed and unintentionally has references create a potential memory leak. GC detects the objects which doesn't have any reference. It checks for unreferenced objects not unused objects.
Refer :
https://dzone.com/articles/memory-leak-andjava-code
https://www.youtube.com/watch?v=iFr1cvwhfbw (ATM example) 

19. Can Java file name is different than the class Name ?
Ans. Yes, only if there is not any public class in the file. If its there than filename and class Name has to be same. Else will give the compile time error.
Refer : https://www.geeksforgeeks.org/myth-file-name-class-name-java/https://www.geeksforgeeks.org/myth-file-name-class-name-java/

20. JDBC connection?
Ans. 5 steps involved as below :
1. Register the driver class : Use forName() method
2. Create the connection : Use getConnection() method
3. Create statement : Use createStatement() method
4. Executing Queries : Use executeQuery() method
5. Close Connection : Use close() method

21. Why is a char array i.e char[] preferred over String to store a password?
A. String is immutable in Java and stored in the String pool. Once it is created it stays in the pool until garbage collected. This has greater risk of 1) someone producing a memory dump to find the password 2) the application inadvertently logging password as a readable string.

If you use a char[] instead, you can override it with some dummy values once done with it, and also logging the char[] like “[C@5829428e” is not as bad as logging it as String “password123”.

22. What is casting?
Ans. Casting means taking an object of one type and converting it into an another object type is called casting.

23. Upcasting and Downcasting in Java ?
Ans. Upcasting/Widening is possible in Java and done automatically. For downcasting, we have to typecast the object of one type into another's object type.
Example :
WebDriver driver = new FirefoxDriver();, Parent parent = new Child(); //This is upcasting and supported bydefault in Java 
Here WebDriver is a super interface of every browser driver class like FirefoxDriver,ChromeDriver,SafariDriver etc. This means we are upcasting FirefoxDriverclass object to WebDriver interface. That means, WebDriver interface reference is holding an object of FirefoxDriver class. This way, we can not call the methods of FirefoxDriver class, only the methods which are overridden by FirefoxDriver class from WebDriver interface will be called. If we take Parent example, this means Parent class reference is holding an object of Child class and only the overridden methods in Child class will be called along with all the methods of Parent class.

FirefoxDriver driver = (FirefoxDriver) new WebDriver;, Child child = (Child) new Parent(); // This is downcasting and not supported in Java by default so here we have to typecast the Object of parent class into Child's class reference.

24. Order of execution in Java ?
Ans. 1. Static Variables
2. Static Block
3. Main Method
4. Static Method
5. Non Static variables
6. Non Static Block
7. Constructor
8. Non Static Method

Note : Better look for the example written in eclipse and memorize sequence as below :
1. Static Block
2. Instance Variables
3. Non Static block
4. Constructor

25. How HashMap internally works in java ?
Ans. HashMap internally works on the principle of Hashing. Hashing is the process of converting an object into integer form using hashCode() method.
The default capacity of HashMap is 16 which is 2^4, that means [0-15] indexes and resizing of HashMap is done when it reaches 12th index which is calculated with a load factor of 0.75. Therefore, 16 * .75 = 12. After resize, it increases the capacity to 2^5 which is 32 elements. And again resize time will be calculated as 32*.75 = 24. That means again at 24th index resizing will happen and HashMap would be 2^6. 
1. How hashmap stores the objects i.e how put(key,value) method works in HashMap?
Ans. 1. First it checks if the given key is null or not, if its null, it stores it as a 0th index since the hashcode of null key is 0.
2. It calculates the hashcode of the key using hashCode() method. After this, it gets the index of the hashCode using indexFor() method to store it in the HashMap array at particular index and store the element as an Entry object which stores Key,Value,hashCode and next node.
3.In Case of collision:

map.put(new Key("vaibhav"), 40);

Steps:

    Calculate hash code of Key {“vaibhav”}. It will be generated as 118.
    Calculate index by using index method it will be 6.
    Create a node object as :

     {
      int hash = 118
      Key key = {"vaibhav"}
      Integer value = 40
      Node next = null
    }

    Place this object at index 6 if no other object is presented there.
    In this case a node object is found at the index 6 – this is a case of collision.
	In that case, check via hashCode() and equals() method that if both the keys are same.If keys are same, replace the value with current value.Otherwise connect this node object to the previous node object via linked list and both are stored at index 6.

2. How does the get operation work in HashMap?
Ans. 1. Calculate the hashcode for the key object using hashCode() method.
2. Calculate the index for the hashCode using indexFor() method.
3. Go to that particular index and verify if hashCode matches to what is stored already with what is generated now. If it matches, then verify if the key is equal to what is stored and what is passed in key method using equals() method. If it matches, then return the value of key object.
4. How does get method work when Key object has same hashCode: It follows the same above step, compares the hashCode, if it comes same then check for the key value. If key doesn't match, it checks if the node has next element or points to null. If it points to null then return null else compare the key of next element again using equals() method. If key matches for the third element of the node in a linkedlist, return the value of that key.

Refer : https://www.geeksforgeeks.org/internal-working-of-hashmap-java/


Java Interview Question :
1. https://www.geeksforgeeks.org/commonly-asked-java-programming-interview-questions-set-1/
2. https://www.geeksforgeeks.org/commonly-asked-java-programming-interview-questions-set-2/
3. https://www.javatpoint.com/corejava-interview-questions#corebasicsinterview

Java Interview Questions on Private Modifier :
1. https://javaconceptoftheday.com/java-interview-questions-on-modifiers/
2. https://javaconceptoftheday.com/java-practice-questions-on-access-modifiers/

******************** GIT Version Control System ********************************************************************************************

GIT : 
It is divided in 4 directories mainly:
1. Local Repository : Where user makes the changes/works on the project.
2. Staging/Index Area : Where user keeps track of the changes which will be pushed to the remote repository : The code is pushed to stage/index area using "git add <fileName>"
3. Head : This points to the last commit user have made : The code is pushed to Head area using git commit - m "Message" 
4. Remote Repository : Every user checks in the code, which is remote repository : The code is pushed to remote/master branch using "git push origin master"

Ref : https://rogerdudler.github.io/git-guide/
https://www.edureka.co/blog/git-tutorial/

1. To clone the working existing git repository?
Ans. git clone <repo-URL>

2. To add file to Staging area from Local repository?
Ans. git add <file-name> //This will add the file to staging area
git add* // To add all changed files to staging.
Note : The changes are not in HEAD area still. 

3. To remove the file from staging area as still some changes are left out before committing?
Ans. git rm -cached<file-name>
git rm*  //To remove all staged files

4. To show the status of remote, local and staging repository?
Ans. git status

5. To commit the files for pushing to remote repository?
Ans. git commit -m "Added new files"
Note : The code is still in HEAD area after commit but not yet pushed to remote repository.

6. To push changes to remote ?
Ans. git push origin <branchName>

7. Git reset commands ?
Ans. 
1. git reset : Reset staging area and leaves the working directory unchanged.
2. git reset --hard : Reset staging and working directory.
3. git reset <commit> : Reset staging area to last commit and leaves the working directory unchanged.
4. git reset --hard <commit> : Reset staging and working directory area to last commit.

8. To pull the latest changes ?
Ans. git pull

9. Difference between git pull and git fetch?
Ans. git pull = git fetch + git merge
git fetch : Pulls the changes in the new branch in local and then git merge is required to reflect the changes in local repo.

10. What is git stash?
Ans. If you need to switch branches and wants to save the modified files from current branch. Use git stash to save it.

11. To undo the pushed changes to remote ?
Ans. git commit --amend 

12. To check the list of branches in a repo
Ans. git branch -a

13. To create a new branch and make it in sync with master.
Ans. git checkout -b <branchName>

14. To switch back to master branch or any other branch.
Ans. git checkout master , git checkout <branch_Name>

15. To take latest pull from master to branch?
Ans. Be in branch directory and then  git pull origin master 

16. To merge your changes from branch to master?
Ans. Get back to master branch using "git checkout master" and then git merge <branchName> and then git push to push the code to remote master or else create a PULL request (PR) to review and merge.

********************************************** Maven ******************************************************************************

1. What is Maven ?
Ans. Its a build Automation tool for the project developed by Apache.

2. What does it do, its advantages and what is its lifecycle?i
Ans. It builds the project and the advantage is to download the required Jar's of the project by just mentioning it in the form of dependencies in POM(Project Object Model).xml file.
LifeCycle :
1. Maven Compile : Uses Maven Compiler (To compile all Java, class files)
2. Maven Test : Uses Maven Surefire plugin to run all test cases
3. Maven package : Source plugin which generates the JAR's,WAR's,EAR's files
Therefore, Maven is a build tool which compiles,Test and generates the resource file in the form of JAR's,WAR's or EAR's file to be used by anyone else.

3. Components of dependencies?
Ans. GroupID, Artifact, Version No

4. Maven Commands :
1. mvn clean install : Clean the target folder jar files, Compile the code, Test the code(run the test cases), generate the Jar file (Maven complete lifecycle)
2. mvn test : Doesn't compile, just run the test cases.
3. mvn package -DskipTests : Compile and generate the build without executing the Test Cases (Dev's generally do this way to give the build to QA to avoid running all TC's)

5. How to run all Test files using Maven?
Ans. There are couple of ways to do the same :
1. Mention Maven plugins in POM.xml file (Complier, surefire and source plugin) and mention the testng.xml file inside the surefire plugin as the configuration file. So, when you do "mvn clean install" it will pick all tests depending on the configuration file given in POM.xml file under surefire plugin which would be a normal testng.xml file.
2. mvn clean install -DsuiteFile="testng.xml" or if more details are required then use : mvn clean install -Dconfile="..\Properties" -DsuiteFile="testNg.xml"

6. Difference between Maven and ANT?
Ans.
			ANT   																		Maven
1. Need to define the project structure like where to keep the source code, 		1. Maven comes with standard project sturtcure in POM.xml file
compiled code, test code in Build.xml file											2. Maven has a dependency concept and download Jar's from local or central repository which doesn't need any manual effort.
2. ANT uses lib to store JAR's which requires manual effort to download
and change jars.
3. ANT doesn't have a lifecycle. You need to define targets and dependencies.		3. Maven has a lifecycle which gets executed by "mvn clean 		install" and does clean, compile, test and packaging of code in JAR, WAR or EAR's.
4. Its mainly a build tool.															4. Its more than a build tool as a project management tool, can generate reports as well.



********************** Jenkins **********************************************************************************************

1. What is Jenkins and what does it do ?
Ans. Jenkins and Hudson are Continues Integration tool, which gives you power to automate your build and deployment process. By using Jenkins or Hudson you can trigger build whenever developer commit code, to see if project is compiling fine, to run unit tests, to create build or even deploy in QA or production environment. 
Similarly you can have daily build, nightly build or weekly build process established in Jenkins or Hudson

Read more: https://javarevisited.blogspot.com/2015/01/difference-between-maven-ant-jenkins-and-hudson.html#ixzz5VDeCVkYm


********************** File Handling **************************************************************************************************

File excel = new File("FilePath");
FileInputStream fis = new FileInputStream(excel);
HSSFWorkbook wb = new HSSFWorkbook(fis);
HSSFWorksheet ws = wb.getSheet("SheetName");
int rowNum = ws.getLastRowNum() +1 as it starts from 0  or     int rowNum = ws.getLastRowNum()-ws.getFirstRowNum();
int colNum = ws.getRow(0).getLastCellNum();
for(int i=; i<rowNum; i++){
	Row row = ws.getRow(i);
	for(int j=0; j<ws.getLastCellNum(); j++){
		System.out.print(row.getCell(j).getStringCellValue()+"||");
	}
}

**********************************************************************************************************************************************

Backend Information :

1. Software Architecture ?
Ans. Watch this video to refresh : https://youtu.be/ccOzcjHQVos
Presentation Layer (Web Layer) : Where the actions are performed on web pages. Lets say GMAIL to enter UN and PWD
Application Layer (Business Layer/Logical Layer) : Which understands the request and pass the information to DB, fetches results and shows it on Presentation layer 
DB Layer : To process the requests received from Business layer

1 Tier : Where all three layers are present at client end. Ex : MS office, MP3 player : All available on system
2. 2 Tier : Where client manages Presentation and Business Layer and DB layer is separate
3. 3 Tier : Where presentation, business and DB layer all are deployed on diff servers.

2. https://www.upwork.com/hiring/development/a-beginners-guide-to-back-end-development/


********************************************************************************************************************************************** 

SQL :

1. Joins
Ans. https://www.softwaretestingclass.com/sql-joins/ , https://www.w3schools.com/sql/sql_join.asp

2. Sub-Queries
Ans. https://www.softwaretestingclass.com/sql-sub-queries/

3. Group-By
Ans. https://www.softwaretestingclass.com/sql-group-by-clause/

4. Union
Ans. https://www.softwaretestingclass.com/sql-union/

5. Current Date
Ans. SELECT GetDate(); 

6. Types of Joins in SQL ?
Ans. 1. Inner Join : Returns only matched rows from both the table.
2. Outer Join 
	2.1 : Left Outer Join /Left Join : Returns all columns from left table and matched rows from right table.
	2.2 : Right Outer Join /Right Join : Returns all columns from right table and matched rows from left table.
3. Full Join
4. Cross Join : Returns the cartesian sum of both the tables.

Synatx :
Select Table1.Col1, Table2.col2 from Table1
InnerJoin/Left Join/Right Join Table2
ON Table1.col1 = Table2.col1

7. Queries :
a). return employee record with highest salary?
Ans. Select * from Employee where sal = (Select Max(sal) from Employee);

b). return the highest salary in employee table?
Ans. Select max(sal) from Employee;

c). return 2nd highest salary from emp table?
Ans. Select max(sal) from Employee where sal Not IN (Select max(sal) from Employee);

d). Select range of employees based on id?
Ans. Select * from Employee where empID between 100 and 500

e). return an employee with highest salary and the employee's department name?
Ans. Select e.firstName, e.lastName, d.departmentName from Employee e
InnerJoin Department d
ON (e.departmentID = d.departmentID)
where sal IN (Select max(sal) from Employee);

f). return highest salary,employee name, department name for each department?
Ans. Select e.firstName, e.lastName, d.departmentName from Employee e
InnerJoin Department d
ON (e.DepartmentID = d.departmentID)
where sal IN (Select max(sal) from Employee group by Department);

g). return 3rd/nth highest salary ?
Ans. Select TOP 1 Salary 
	 FROM(
		Select DISTINCT TOP 3 Salary
		From Employee
		Order By Salary Desc
		 ) result
	 Order By Salary;
	 
Explaination : The inside query gets 3 salaries which are distinct and TOP is used just to tell how many salaries which can be replaced by n as per the question, not related to highest number followed by Order By Desc so that the highest salary comes first. Later Order By Salary is used to put it in ascending order so that the last salary comes at first place and in outer query we have used TOP 1 which means only one salary to be returned.

To return 17th highest salary :

Select TOP 1 Salary From (Select DISTINCT TOP 17 Salary from Employees Order By DESC) result OrderBy Salary;

h). Return all names from Employee which start with a and end with b?
Ans. Select * from Employee where ename like 'a%b'; : Start with a and end with b
Select * from Employee where ename like 'a%'; : Start with a
Select * from Employee where ename like '%a'; : End with a
Select * from Employee where ename like '_r'; : Values which have r at second position

Note : Use Like operator using % (Percentile) and _ (Underscore) : % means zero, one or any number of characters. _ means only one characters

i). List the number of customers in each country. Only include countries with more than 10 customers. 
Ans. Select Country, count(customer_ID) from Customer
	GroupBy Country
	Having count(customer_ID) > 7

j). List the number of customers in each country, except the USA, sorted high to low. Only include countries with 9 or more customers.
Ans. Select count(customer_ID), country from Customer
	 Where country <> 'USA'       // <> means not equal to
	 GroupBy Country
	 Having count(customer_ID) > 9

For GroupBy and Having clause queries: Refer : https://www.dofactory.com/sql/having

8. Difference between Primary, Unique and Foreign Key ?
Ans. Primary Key : Used to uniquely identify a record in a table. It has implicit Unique and Not Null constraint. That means all the values of primary key must be unique and can not contain null values. A table can have only one primary key.

Unique Key : Its also used to uniquely identify a record in a table. However, Primary key has a unique key contraint implicitly. But unique key doesn't have that. Also, you can have as many as Unique key in a table but only one primary key. Also, it allows null value but only one.

Foreign Key : Used to uniquely identify a record in the other table which has a refernce the primary key in first table.

9. Constraints in SQL ?
Ans. Used to set some rules in a table. Types of Constraints :
1. NOT NULL : The column values can not be null.
2. UNIQUE KEY : All column values are different
3. PRIMARY KEY : It has Not null and Unique key contraint by default.
4. FOREIGN KEY : Uniquely identifies a record in another table.
5. CHECK : To verify the specific condition in a table.
6. DEFAULT : To initialize the column value with default when no value is specified.
7. INDEX : To retrieve data from database using index quickly.

10. What is Stored procedure in SQL ?
Ans. Stored procedure is a function which consists of many SQL statements to perform some actions on database and we can execute them whenever and wheerever required. Its like a function/method we create in programming language to avoid writing the same code again and again and do that using a method. Same can be done by stored procedure which is nothing but a method that consists of SQL statements to perform some action on database.

11. What is trigger in Database ?
Ans. Trigger is a special type of Stored Procedure which automatically gets executed whenever some event occurs in a databse. Example :
When a new student is added to student database : New record should be created in related tables like score, exam etc.

12. What is UNION in SQL ?
Ans. Used to combine the result set of 2 or more tables in SQL provided that both the table has same number of columns of same type. It eliminates duplicates by default. To allow duplicates, use UNION All. Example Below :
Select column_name from table1
UNION/UNION ALL
Select column_name from table2

13. Difference between DROP, TRUNCATE and DELETE in SQL ?
Ans. DROP : Removes the table from the database. All table definition, priviledges are removed and can not be rolled back. It is DDL command.
TRUNCATE : Removes all rows from a table and can not be rolled back. Table def is not removed. Can not use where clause with truncate. Its also a DDL command. Free the space contained by the table.
DELETE : Removes all rows from table if conditioin is not specified. Can be rolled back and its a DML command. Does not free the space containing by the table.


********************************************************************************************************************************************** 

*******************Networking**********************************************************************************************

1. HTTP v/s HTTP's
Ans. To implement HTTPS connection, the developer has to install the SSL certificate in the webserver. With HTTP, any hacker can get the network information/communication in a packet which will be in a plain text and know your sensitive information. With HTTPS, the communication between your browser/client and server is in encrypted format and the encryption is of very high level using Assymetric Encryption.

Complexities :

https://www.geeksforgeeks.org/time-complexities-of-all-sorting-algorithms/

**********************************************************************************************************************************************

Constructor Inheritance : Constructor Inheritance : http://www.dailyfreecode.com/code/constructor-inheritance-super-keyword-1397.aspx

***********************************************************************************************************************************************

Collections : https://beginnersbook.com/2015/01/difference-between-list-set-and-map-in-java/

***********************************************************************************************************************************************


Java Interview : https://www.studytonight.com/flashcards/Java/#

1. CamelCase String
2. Multiples of a number in an array

******************************************* Linux/Unix **********************************************************************

1. To open a file
Ans. vi <fileNAme>

2. To enter in insert mode?
Ans. Press i in mac or insert mode in windows

3. To exit from vm or to exit after saving the changes ?
Ans.  Press ESC + :q ,   Press ESC + :wq

4. To navigate inside the file in vi editor?
Ans. End of line : Upper Case  G, First Line : lowercase gg, Specific Line : <LineNumber>G

5. To search for a text inside vi editor?
Ans. Use /<text> and press n for next occurrence. 


Checking branch changes: Deleted from branch
